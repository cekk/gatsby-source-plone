{"componentChunkName":"component---src-templates-default-js","path":"/tutorial/4_handling_data_types/","result":{"data":{"ploneCollection":null,"ploneDocument":{"id":"http://localhost:8080/Plone/tutorial/4_handling_data_types","title":"Handling different data types","description":"","text":{"react":"[{\"type\":\"p\",\"props\":{\"children\":[\"Plone has a couple of native content object types and even custom ones. For these, we need to create separate components for each, and configure \",{\"type\":\"code\",\"props\":{\"children\":[\"gatsby-node.js\"]}},\" to create individual pages and display the content in a gatsby site.\"]}},{\"type\":\"p\",\"props\":{\"children\":[\"Firstly step would be creating pages for each of these objects:\"]}},{\"type\":\"pre\",\"props\":{\"children\":[{\"type\":\"code\",\"props\":{\"className\":\"language-javascript\",\"children\":[\"// gatsby-node.js\\nexports.createPages = async ({ graphql, actions }) => {\\n  const { createPage } = actions;\\n  const result = await graphql(`\\n    {\\n      allPloneCollection {\\n        edges {\\n          node {\\n            _path\\n          }\\n        }\\n      }\\n      allPloneDocument {\\n        edges {\\n          node {\\n            _path\\n          }\\n        }\\n      }\\n      allPloneEvent {\\n        edges {\\n          node {\\n            _path\\n          }\\n        }\\n      }\\n      allPloneFolder {\\n        edges {\\n          node {\\n            _path\\n          }\\n        }\\n      }\\n      allPloneNewsItem {\\n        edges {\\n          node {\\n            _path\\n          }\\n        }\\n      }\\n    }\\n  `);\\n  []\\n    .concat(\\n      result.data.allPloneCollection.edges,\\n      result.data.allPloneDocument.edges,\\n      result.data.allPloneEvent.edges,\\n      result.data.allPloneFolder.edges,\\n      result.data.allPloneNewsItem.edges\\n    )\\n    .forEach(({ node }) => {\\n      createPage({\\n        path: node._path,\\n        component: path.resolve('./src/templates/default.js'),\\n      });\\n    });\\n};\"]}}]}},{\"type\":\"p\",\"props\":{\"children\":[\"Before we just handled folders, now we query for each of the content object types and create pages for them. The next step would be to configure the default template to handle the data depending on type since we're using it commonly for all of the types.\"]}},{\"type\":\"pre\",\"props\":{\"children\":[{\"type\":\"code\",\"props\":{\"className\":\"language-javascript\",\"children\":[\"// src/templates/default.js\\n\\n\\n// Function to return relevant component as per content object type\\nconst componentFor = data => {\\n  if (data) {\\n    if (data.ploneCollection) {\\n      return (\\n        <Folder\\n          data={data.ploneCollection}\\n        />\\n      );\\n    } else if (data.ploneDocument) {\\n      return (\\n        <Document\\n          data={data.ploneDocument}\\n        />\\n      );\\n    } else if (data.ploneEvent) {\\n      return (\\n        <Event\\n          data={data.ploneEvent}\\n        />\\n      );\\n    } else if (data.ploneFolder) {\\n      return (\\n        <Folder\\n          data={data.ploneFolder}\\n        />\\n      );\\n    } else if (data.ploneNewsItem) {\\n      return (\\n        <NewsItem\\n          data={data.ploneNewsItem}\\n        />\\n      );\\n    } else {\\n      return null;\\n    }\\n  } else {\\n    return null;\\n  }\\n};\\n\\nconst DefaultLayout = ({ data }) => <Layout>{componentFor(data)}</Layout>;\\n\\n// Query for all the different types from GraphQL\\n// Fragments for each type are defined in their relevant components\\nexport const query = graphql`\\n  query DefaultTemplateQuery($path: String!) {\\n    ploneCollection(_path: { eq: $path }) {\\n      ...Collection\\n    }\\n    ploneDocument(_path: { eq: $path }) {\\n      ...Document\\n    }\\n    ploneEvent(_path: { eq: $path }) {\\n      ...Event\\n    }\\n    ploneFolder(_path: { eq: $path }) {\\n      ...Folder\\n    }\\n    ploneNewsItem(_path: { eq: $path }) {\\n      ...NewsItem\\n    }\\n  }\"]}}]}},{\"type\":\"p\",\"props\":{\"children\":[\"Now all you need to do is design each component. Similar to the Folder component we already have, different components can be built depending on the data passed in and to be displayed.\"]}},{\"type\":\"p\",\"props\":{\"children\":[\"Next: \",{\"type\":\"Link\",\"props\":{\"href\":null,\"to\":\"/tutorial/5_images_and_files/\",\"children\":[\"Image and File Handling\"]}}]}}]"},"_path":"/tutorial/4_handling_data_types/"},"ploneEvent":null,"ploneFolder":null,"ploneNewsItem":null,"ploneBreadcrumbs":{"items":[{"_id":"http://localhost:8080/Plone/tutorial","_path":"/tutorial/","title":"Tutorial"},{"_id":"http://localhost:8080/Plone/tutorial/4_handling_data_types","_path":"/tutorial/4_handling_data_types/","title":"Handling different data types"}]},"allPloneFile":{"edges":[]},"allPloneImage":{"edges":[]}},"pageContext":{}},"staticQueryHashes":["2891224598"]}