{"version":3,"sources":["webpack:///./src/components/Event.js","webpack:///./src/components/NewsItem.js","webpack:///./src/components/Collection.js","webpack:///./src/templates/default.js"],"names":["Event","data","images","files","key","_id","title","start","description","RichText","serialized","text","react","NewsItem","resolutions","image","childImageSharp","fixed","effective","Collection","Folder","query","DefaultLayout","Layout","breadcrumbs","ploneBreadcrumbs","nodes","edges","map","edge","node","ploneCollection","allPloneImage","allPloneFile","ploneDocument","Document","ploneEvent","ploneFolder","ploneNewsItem","componentFor"],"mappings":"yLAqBeA,EAjBD,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,MAAjB,OACZ,6BAASC,IAAKH,EAAKI,KACjB,4BAAKJ,EAAKK,OACV,2BACE,yCACS,4BAAKL,EAAKM,SAGpBN,EAAKO,YACJ,2BACE,gCAASP,EAAKO,cAEd,KACJ,kBAACC,EAAA,EAAD,CAAUC,WAAYT,EAAKU,KAAKC,MAAOV,OAAQA,EAAQC,MAAOA,M,6CCMnDU,EAlBE,SAAC,GAAD,IAAGZ,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,MAAjB,OACf,6BAASC,IAAKH,EAAKI,KACjB,4BAAKJ,EAAKK,OACV,kBAAC,IAAD,CAAKQ,YAAab,EAAKc,MAAMC,gBAAgBC,QAC7C,2BACE,+CACe,4BAAKhB,EAAKiB,aAG1BjB,EAAKO,YACJ,2BACE,gCAASP,EAAKO,cAEd,KACJ,kBAACC,EAAA,EAAD,CAAUC,WAAYT,EAAKU,KAAKC,MAAOV,OAAQA,EAAQC,MAAOA,MCXnDgB,EAJI,SAAC,GAAD,IAAGlB,EAAH,EAAGA,KAAMK,EAAT,EAASA,MAAOJ,EAAhB,EAAgBA,OAAQC,EAAxB,EAAwBA,MAAxB,OACjB,kBAACiB,EAAA,EAAD,CAAQnB,KAAMA,EAAMK,MAAOA,EAAOJ,OAAQA,EAAQC,MAAOA,KCgE9CkB,GAFEC,UANO,SAAC,GAAD,IAAGrB,EAAH,EAAGA,KAAH,OACpB,kBAACsB,EAAA,EAAD,CAAQC,YAAavB,EAAKwB,kBAAoB,IApD3B,SAACxB,GACpB,IAAMyB,EAAQ,SAACL,GAAD,OAAYA,EAAQA,EAAMM,MAAQ,IAAIC,KAAI,SAACC,GAAD,OAAUA,EAAKC,SACvE,OAAI7B,EACEA,EAAK8B,gBAEL,kBAAC,EAAD,CACE9B,KAAMA,EAAK8B,gBACX7B,OAAQwB,EAAMzB,EAAK+B,eACnB7B,MAAOuB,EAAMzB,EAAKgC,gBAGbhC,EAAKiC,cAEZ,kBAACC,EAAA,EAAD,CACElC,KAAMA,EAAKiC,cACXhC,OAAQwB,EAAMzB,EAAK+B,eACnB7B,MAAOuB,EAAMzB,EAAKgC,gBAGbhC,EAAKmC,WAEZ,kBAAC,EAAD,CACEnC,KAAMA,EAAKmC,WACXlC,OAAQwB,EAAMzB,EAAK+B,eACnB7B,MAAOuB,EAAMzB,EAAKgC,gBAGbhC,EAAKoC,YAEZ,kBAACjB,EAAA,EAAD,CACEnB,KAAMA,EAAKoC,YACXnC,OAAQwB,EAAMzB,EAAK+B,eACnB7B,MAAOuB,EAAMzB,EAAKgC,gBAGbhC,EAAKqC,cAEZ,kBAAC,EAAD,CACErC,KAAMA,EAAKqC,cACXpC,OAAQwB,EAAMzB,EAAK+B,eACnB7B,MAAOuB,EAAMzB,EAAKgC,gBAIf,KAGF,KAMNM,CAAatC,KAMA","file":"component---src-templates-default-js-743157dccc8ae66969d2.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport RichText from './RichText';\n\nconst Event = ({ data, images, files }) => (\n  <article key={data._id}>\n    <h1>{data.title}</h1>\n    <p>\n      <small>\n        Begins <em>{data.start}</em>\n      </small>\n    </p>\n    {data.description ? (\n      <p>\n        <strong>{data.description}</strong>\n      </p>\n    ) : null}\n    <RichText serialized={data.text.react} images={images} files={files} />\n  </article>\n);\n\nexport default Event;\n\nexport const query = graphql`\n  fragment Event on PloneEvent {\n    id\n    title\n    description\n    start(formatString: \"MMMM Do, YYYY @ HH:MM\")\n    text {\n      react\n    }\n    _path\n  }\n`;\n","import React from 'react';\nimport Img from 'gatsby-image';\nimport { graphql } from 'gatsby';\nimport RichText from './RichText';\n\nconst NewsItem = ({ data, images, files }) => (\n  <article key={data._id}>\n    <h1>{data.title}</h1>\n    <Img resolutions={data.image.childImageSharp.fixed} />\n    <p>\n      <small>\n        Published on <em>{data.effective}</em>\n      </small>\n    </p>\n    {data.description ? (\n      <p>\n        <strong>{data.description}</strong>\n      </p>\n    ) : null}\n    <RichText serialized={data.text.react} images={images} files={files} />\n  </article>\n);\n\nexport default NewsItem;\n\nexport const query = graphql`\n  fragment NewsItem on PloneNewsItem {\n    id\n    title\n    description\n    effective(formatString: \"MMMM Do, YYYY\")\n    image {\n      childImageSharp {\n        fixed(width: 200) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    text {\n      react\n    }\n    _path\n  }\n`;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport Folder from './Folder';\n\nconst Collection = ({ data, title, images, files }) => (\n  <Folder data={data} title={title} images={images} files={files} />\n);\n\nexport default Collection;\n\nexport const query = graphql`\n  fragment Collection on PloneCollection {\n    id\n    title\n    description\n    text {\n      react\n    }\n    items {\n      _id\n      _path\n      _type\n      description\n      title\n    }\n    _path\n  }\n`;\n","import React from 'react';\nimport { graphql } from 'gatsby';\n\nimport Document from '../components/Document';\nimport Event from '../components/Event';\nimport Folder from '../components/Folder';\nimport Layout from '../components/Layout';\nimport NewsItem from '../components/NewsItem';\nimport Collection from '../components/Collection';\n\nconst componentFor = (data) => {\n  const nodes = (query) => (query ? query.edges : []).map((edge) => edge.node);\n  if (data) {\n    if (data.ploneCollection) {\n      return (\n        <Collection\n          data={data.ploneCollection}\n          images={nodes(data.allPloneImage)}\n          files={nodes(data.allPloneFile)}\n        />\n      );\n    } else if (data.ploneDocument) {\n      return (\n        <Document\n          data={data.ploneDocument}\n          images={nodes(data.allPloneImage)}\n          files={nodes(data.allPloneFile)}\n        />\n      );\n    } else if (data.ploneEvent) {\n      return (\n        <Event\n          data={data.ploneEvent}\n          images={nodes(data.allPloneImage)}\n          files={nodes(data.allPloneFile)}\n        />\n      );\n    } else if (data.ploneFolder) {\n      return (\n        <Folder\n          data={data.ploneFolder}\n          images={nodes(data.allPloneImage)}\n          files={nodes(data.allPloneFile)}\n        />\n      );\n    } else if (data.ploneNewsItem) {\n      return (\n        <NewsItem\n          data={data.ploneNewsItem}\n          images={nodes(data.allPloneImage)}\n          files={nodes(data.allPloneFile)}\n        />\n      );\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n};\n\nconst DefaultLayout = ({ data }) => (\n  <Layout breadcrumbs={data.ploneBreadcrumbs || []}>\n    {componentFor(data)}\n  </Layout>\n);\n\nexport default DefaultLayout;\n\nexport const query = graphql`\n  query DefaultTemplateQuery($path: String!) {\n    ploneCollection(_path: { eq: $path }) {\n      ...Collection\n    }\n    ploneDocument(_path: { eq: $path }) {\n      ...Document\n    }\n    ploneEvent(_path: { eq: $path }) {\n      ...Event\n    }\n    ploneFolder(_path: { eq: $path }) {\n      ...Folder\n    }\n    ploneNewsItem(_path: { eq: $path }) {\n      ...NewsItem\n    }\n    ploneBreadcrumbs(_path: { eq: $path }) {\n      items {\n        _id\n        _path\n        title\n      }\n    }\n    allPloneFile(filter: { _backlinks: { eq: $path } }) {\n      edges {\n        node {\n          ...File\n        }\n      }\n    }\n    allPloneImage(filter: { _backlinks: { eq: $path } }) {\n      edges {\n        node {\n          ...Image\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}